########################################
# Basic Visualization Tools
########################################
import numpy as np
import pandas as pd

df_can = pd.read_excel("")

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.style.use("ggplot")
years = list(range(1980,2005))

df_top5 = df_can.head()[years].T
df_top5.index = df_top5.index.map(int)

####################
# Area
####################
# 表征一段时间内的数量: 1980 ~ 2005 几个国家移民数量
# Option 1: Scripting layer(procedural method)
# use plt i.e. matplotlib.pyplot

df_top5.plot(kind='area', 
             stacked=False, 
             alpha=0.25, # transparency: 0-1, default value 0.5
             figsize=(20,10), # (x,y)
             )
plt.title("")
plt.ylabel("")
plt.xlabel("")

# Option 2: Artisti layer
# use Axes instance
ax = df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10))

ax.set_title('')
ax.set_ylabel('')
ax.set_xlabel('')

####################
# Histograms
####################
# 表征不同点的频率 the frequency distribution of numeric dataset
# 2005 年不同国家移民人数情况的概率分布(每个区间的数量)

count, bin_edges = np.histogram(df_can['2013'])

df_can['2013'].plot(kind='hist', 
                    figsize=(8,5),
                    xticks=bin_edges, #align x-range
                    )

plt.title('')
plt.ylabel('')
plt.xlabel('')

plt.show()

df_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()

df_t.plot(kind='hist', 
          figsize=(10, 6),
          bins=15,
          alpha=0.6,
          xticks=bin_edges,
          color=['coral', 'darkslateblue', 'mediumseagreen']
          )

plt.title('')
plt.ylabel('')
plt.xlabel('')
plt.show()

### ALL colors:
for name, hex in mpl.colors.cnames.items():
    print(name, hex)

####################
# Bar
####################
df_can.plot(kind='bar', figsize=(10,6))
df_continents = df_can.group_by('continent', axis=0).sum()

########################################
# Specialization Visualization Tools
########################################

# Groupby: 1: Split 
#          2: Apply: sum() count() mean() std() aggregate() apply()
#          3: Combine


####################
# Pie Charts
####################
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0, 0, 0, 0.1, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

df_continents['2013'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,       
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3 continents
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent 2013', y=1.12) 
plt.axis('equal') 

# add legend
plt.legend(labels=df_continents.index, loc='upper left') 
plt.show()

####################
# Box Plots
####################
# Outilers 1.5 * Inter Quartile Range(IQR), Maximun, Third QUartile, 
# Median, First Quartile, Minimum
df_CI = df_can.loc[['China', 'India'], years].transpose()
df_CI.plot(kind='box', figsize=(10,7))
plt.title('Box plots of Immigrants from China and India (1980 - 2013)')
plt.xlabel('Number of Immigrants')

####################
# Subplot in figure
####################
fig = plt.figure() # create figure

ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**

# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')

# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')

plt.show()

####################
# Scatter Plots
####################
df_total=df_can.loc[['Denmark', 'Norway', 'Sweden'], years].T
df_total=df_total.sum(axis=1).reset_index()
df_total.columns=['year', 'total']
df_total.head()

### type your answer here
df_total['year']=df_total['year'].astype(int)
df_total.plot(kind='scatter', x='year', y='total')

####################
# Bubble Plots
####################
df_can_t = df_can[years].transpose() # transposed dataframe

norm_china = (df_can_t['China'] - df_can_t['China'].min())/(df_can_t['China'].max() - df_can_t['China'].min())
norm_india = (df_can_t['India'] - df_can_t['India'].min())/(df_can_t['India'].max() - df_can_t['India'].min())

ax1 = df_can_t.plot(kind='scatter', x='Year', y='India', alpha=0.5, color='green', s=norm_india*2000+10)
ax0 = df_can_t.plot(kind='scatter', x='Year', y='China', alpha=0.5, color='blue', figsize=(14,8), s=norm_china*2000+10, xlim=(1975,2015), ax=ax1)

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('1980~2013 Immigrant Number of India and China')
ax0.legend(['India', 'China'], loc='upper left', fontsize='x-large')