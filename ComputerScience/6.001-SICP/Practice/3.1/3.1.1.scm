#lang r5rs
(define (dis arg)
  (newline)
   (display arg))

;; error function
(define (error reason . args)
  (display "Error: ")
  (display reason)
  (for-each (lambda (arg)
              (display " ")
              (write arg))
            args)
  (newline))

(dis "Exercise 3.1")
(define (make-accumulator sum)
  (lambda (increment)
    (set! sum (+ sum increment))
    sum))

(define A (make-accumulator 5))
(dis (A 10))
(dis (A 10))

(dis "Exercise 3.2")
(define (make-monitored f)
  (let ((counter 0))
    (lambda (input)
      (cond ((eq? input 'how-many-calls?) counter)
            ((eq? input 'reset-count) (set! counter 0))
            (else (set! counter (+ counter 1))
                  (f input))))))

(define s (make-monitored sqrt))

(dis (s 100))
(dis (s 'how-many-calls?))

(dis "Exercise 3.3")
(define (make-account balance pass-origin)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pass m)
    (if (eq? pass pass-origin)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m)))
      (lambda (x)
        "Incorrect password")))
  dispatch)

; Test
(define acc (make-account 100 'mypass))
(dis ((acc 'mypass 'withdraw) 40))
(dis ((acc 'incorrect 'withdraw) 50))

(dis "Exercise 3.4")
(define (make-account-mod balance pass-origin)
  (let ((incorrect-counter 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (call-the-cops)
      (dis "Call the cops..."))
    (define (correct-pass? pass)
      (cond ((eq? pass pass-origin)
             (set! incorrect-counter 0)
             #t)
            (else (set! incorrect-counter (+ incorrect-counter 1))
                   #f)))
    (define (dispatch pass m)
      (if (correct-pass? pass)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT"
                     m)))
        (lambda (x)
          (if (>= incorrect-counter 7)
            (call-the-cops))
          "Incorrect password")))
    dispatch))

; Test
(define acc-mod (make-account-mod 100 'mypass))
(dis ((acc-mod 'mypass 'withdraw) 40))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'mypass 'withdraw) 40))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
(dis ((acc-mod 'incorrect 'withdraw) 50))
