// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram;
    static Array heap;
    static int tailAddr;

    /** Initializes the class. */
    function void init() {
        let ram = 0;            // memory from 0

        let heap = 2048;        // heap start from 2048
        let heap[0] = 0;        // next
        // let heap[1] = 14335;    // heap length
        let heap[1] = 14334;    // heap length 16384 - 2048 - 2

        let tailAddr = heap;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int curr, block;
        let curr = heap[0];         // first available
        let size = size + 2;        // required memory block = size + 2

        // find the first segment available
        while (size > (heap[curr+1])) {
            if (curr = 0) {
                // end of freeList
                return -1;
            }
            let curr = heap[curr];
        }

        // init block
        let block = (curr + heap[curr+1]) - size;
        let heap[block] = 0;
        let heap[block+1] = size -2;

        // Update current segment size
        let heap[curr+1] = heap[curr+1] - size;

        return heap + block + 2;    // convert to memory address
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap[tailAddr] = (o - 2) - heap;  // convert to heap address
        let tailAddr = heap[tailAddr];
        return ;
    }
}
