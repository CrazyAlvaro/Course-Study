// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /******************  Mux16_0  **********************/
    // Mux16_0: load A register, C-instruction: d1
    And(a=instruction[15], b=instruction[5], out=mux0SelectALU);
    Mux16(a=instruction, b=ALUOutput, sel=mux0SelectALU, out=mux0out); // input: instruction, ALU output

    /******************  A-Register  **********************/
    // Instruction opcode: 0: A-instruction, 1: C-instruction
    Not(in=instruction[15], out=isAInstruction);
    // Assignment to A
    Or(a=isAInstruction, b=instruction[5], out=reloadARegister);
    ARegister(in=mux0out, load=reloadARegister, out=ARegisterOut, out[0..14]=addressM);

    /******************  D-Register  **********************/
    // D-Register: C-instruction and load ALUOutput: d2
    And(a=instruction[15], b=instruction[4], out=DRegisterReload);
    DRegister(in=ALUOutput, load=DRegisterReload, out=DRegisterOut);

    /******************  Mux16_1  **********************/
    // Mux16_1: C-instruction and Select inM: a
    And(a=instruction[15], b=instruction[12], out=inMLoad);
    Mux16(a=ARegisterOut, b=inM, sel=inMLoad, out=mux1out); // input: A register, inM

    /******************  ALU  **********************/
    // ALU:
    // Textbook: <>ALU table chapter 2 Figure 2.6
    ALU(x=DRegisterOut, y=mux1out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOutput, zr=outEquals0, ng=outNegative);

    /******************  PC  **********************/
    // JMP out < 0: C-instruction: j1
    And(a=instruction[15],   b=instruction[2], out=shouldJmpNegative);
    And(a=shouldJmpNegative, b=outNegative,    out=jmpNegative);
    // JMP out = 0: C-instrunction: j2
    And(a=instruction[15],   b=instruction[1], out=shouldJmpEquals0);
    And(a=shouldJmpEquals0,  b=outEquals0,     out=jmpEquals0);
    // JMP out > 0: C-instrunction: j3
    And(a=instruction[15],   b=instruction[0], out=shouldJmpPositive);
    Or(a=outNegative,        b=outEquals0,     out=outNotPositive);
    Not(in=outNotPositive,   out=outPositive);
    And(a=shouldJmpPositive, b=outPositive,    out=jmpPositive);
    // JMP condition
    Or(a=jmpNegative, b=jmpEquals0, out=jmpN0);
    Or(a=jmpPositive, b=jmpN0,      out=jmp);
    Not(in=jmp, out=increment);
    PC(in=ARegisterOut, load=jmp, inc=increment, reset=reset, out[0..14]=pc);

    /******************  writeM  **********************/
    // writeM: C-instruction: d3
    And(a=instruction[15], b=instruction[3], out=writeM);
}